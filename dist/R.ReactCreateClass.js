"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var React = R.React;

  var _vanillaCreateClass = _.scope(React.createClass, React);

  var _patchedCreateClass = function createClass(specs) {
    _.defaults(specs, {
      getFluxStoreSubscriptions: function () {
        return {};
      },
      statics: {} });

    function __ReactNexusSurrogate(_ref) {
      var context = _ref.context;
      var props = _ref.props;
      var state = _ref.state;
      var instance;
      React.withContext(context, function () {
        state = state || {};
        var args = [createdClass, _.omit(props, "children")];
        if (props.children) {
          args.push(props.children);
        }
        var element = React.createElement(args);
        instance = R.instantiateReactComponent(element);
        _.extend(instance, { context: context });
        if (instance.getInitialState) {
          state = _.extend({}, state, instance.getInitialState() || {});
        }
        _.extend(instance, { state: state, __ReactNexusSurrogate: __ReactNexusSurrogate });
      });
      return instance;
    }

    _.extend(specs.statics, { __ReactNexusSurrogate: __ReactNexusSurrogate });
    return _.extend(_vanillaCreateClass(specs), { __ReactNexusSurrogate: __ReactNexusSurrogate });
  };

  _.extend(_patchedCreateClass, {
    patchCreateClass: function () {
      _.extend(React, { createClass: _patchedCreateClass });
      return _patchedCreateClass;
    },

    restoreCreateClass: function () {
      _.extend(React, { createClass: _vanillaCreateClass });
      return _vanillaCreateClass;
    } });

  return _patchedCreateClass.patchCreateClass();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L3dvcmtzcGFjZV9wci9yZWFjdC1yYWlscy9zcmMvUi5SZWFjdENyZWF0ZUNsYXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQyxFQUFFO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXRCLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDOztBQUU5RCxNQUFNLG1CQUFtQixHQUFHLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUN0RCxLQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtBQUNoQiwrQkFBeUIsRUFBQSxZQUFHO0FBQUUsZUFBTyxFQUFFLENBQUM7T0FBRTtBQUMxQyxhQUFPLEVBQUUsRUFBRSxFQUNaLENBQUMsQ0FBQzs7QUFFSCxhQUFTLHFCQUFxQixPQUE0QjtVQUF6QixPQUFPLFFBQVAsT0FBTztVQUFFLEtBQUssUUFBTCxLQUFLO1VBQUUsS0FBSyxRQUFMLEtBQUs7QUFDcEQsVUFBSSxRQUFRLENBQUM7QUFDYixXQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxZQUFNO0FBQy9CLGFBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO0FBQ3BCLFlBQUksSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDckQsWUFBRyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ2pCLGNBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNCO0FBQ0QsWUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxnQkFBUSxHQUFHLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxTQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBUCxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLFlBQUcsUUFBUSxDQUFDLGVBQWUsRUFBRTtBQUMzQixlQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUMvRDtBQUNELFNBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFMLEtBQUssRUFBRSxxQkFBcUIsRUFBckIscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO09BQ3RELENBQUMsQ0FBQztBQUNILGFBQU8sUUFBUSxDQUFDO0tBQ2pCOztBQUVELEtBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLHFCQUFxQixFQUFyQixxQkFBcUIsRUFBRSxDQUFDLENBQUM7QUFDbkQsV0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUscUJBQXFCLEVBQXJCLHFCQUFxQixFQUFFLENBQUMsQ0FBQztHQUN4RSxDQUFDOztBQUVGLEdBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUU7QUFDNUIsb0JBQWdCLEVBQUEsWUFBRztBQUNqQixPQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7QUFDdEQsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7QUFFRCxzQkFBa0IsRUFBQSxZQUFHO0FBQ25CLE9BQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztBQUN0RCxhQUFPLG1CQUFtQixDQUFDO0tBQzVCLEVBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztDQUMvQyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDcmVhdGVDbGFzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XHJcbiAgY29uc3QgXyA9IFIuXztcclxuICBjb25zdCBzaG91bGQgPSBSLnNob3VsZDtcclxuICBjb25zdCBSZWFjdCA9IFIuUmVhY3Q7XHJcblxyXG4gIGNvbnN0IF92YW5pbGxhQ3JlYXRlQ2xhc3MgPSBfLnNjb3BlKFJlYWN0LmNyZWF0ZUNsYXNzLCBSZWFjdCk7XHJcblxyXG4gIGNvbnN0IF9wYXRjaGVkQ3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiBjcmVhdGVDbGFzcyhzcGVjcykge1xyXG4gICAgXy5kZWZhdWx0cyhzcGVjcywge1xyXG4gICAgICBnZXRGbHV4U3RvcmVTdWJzY3JpcHRpb25zKCkgeyByZXR1cm4ge307IH0sXHJcbiAgICAgIHN0YXRpY3M6IHt9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gX19SZWFjdE5leHVzU3Vycm9nYXRlKHsgY29udGV4dCwgcHJvcHMsIHN0YXRlIH0pIHtcclxuICAgICAgbGV0IGluc3RhbmNlO1xyXG4gICAgICBSZWFjdC53aXRoQ29udGV4dChjb250ZXh0LCAoKSA9PiB7XHJcbiAgICAgICAgc3RhdGUgPSBzdGF0ZSB8fCB7fTtcclxuICAgICAgICBsZXQgYXJncyA9IFtjcmVhdGVkQ2xhc3MsIF8ub21pdChwcm9wcywgJ2NoaWxkcmVuJyldO1xyXG4gICAgICAgIGlmKHByb3BzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICBhcmdzLnB1c2gocHJvcHMuY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoYXJncyk7XHJcbiAgICAgICAgaW5zdGFuY2UgPSBSLmluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCk7XHJcbiAgICAgICAgXy5leHRlbmQoaW5zdGFuY2UsIHsgY29udGV4dCB9KTtcclxuICAgICAgICBpZihpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUpIHtcclxuICAgICAgICAgIHN0YXRlID0gXy5leHRlbmQoe30sIHN0YXRlLCBpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUoKSB8fCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF8uZXh0ZW5kKGluc3RhbmNlLCB7IHN0YXRlLCBfX1JlYWN0TmV4dXNTdXJyb2dhdGUgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgXy5leHRlbmQoc3BlY3Muc3RhdGljcywgeyBfX1JlYWN0TmV4dXNTdXJyb2dhdGUgfSk7XHJcbiAgICByZXR1cm4gXy5leHRlbmQoX3ZhbmlsbGFDcmVhdGVDbGFzcyhzcGVjcyksIHsgX19SZWFjdE5leHVzU3Vycm9nYXRlIH0pO1xyXG4gIH07XHJcblxyXG4gIF8uZXh0ZW5kKF9wYXRjaGVkQ3JlYXRlQ2xhc3MsIHtcclxuICAgIHBhdGNoQ3JlYXRlQ2xhc3MoKSB7XHJcbiAgICAgIF8uZXh0ZW5kKFJlYWN0LCB7IGNyZWF0ZUNsYXNzOiBfcGF0Y2hlZENyZWF0ZUNsYXNzIH0pO1xyXG4gICAgICByZXR1cm4gX3BhdGNoZWRDcmVhdGVDbGFzcztcclxuICAgIH0sXHJcblxyXG4gICAgcmVzdG9yZUNyZWF0ZUNsYXNzKCkge1xyXG4gICAgICBfLmV4dGVuZChSZWFjdCwgeyBjcmVhdGVDbGFzczogX3ZhbmlsbGFDcmVhdGVDbGFzcyB9KTtcclxuICAgICAgcmV0dXJuIF92YW5pbGxhQ3JlYXRlQ2xhc3M7XHJcbiAgICB9LFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gX3BhdGNoZWRDcmVhdGVDbGFzcy5wYXRjaENyZWF0ZUNsYXNzKCk7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==