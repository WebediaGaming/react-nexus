"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");
  var recase = require("change-case");
  var parse = require("css-parse");
  var _autoprefixer = require("autoprefixer-core");
  var CleanCSS = require("clean-css");

  var Style = function Style(style) {
    return Style.slowlyProcessReactStyle(style);
  };

  _.extend(Style, {
    Processors: {
      autoprefixer: function autoprefixer(css) {
        return _autoprefixer.process(css).css;
      },
      min: function min(css) {
        return new CleanCSS().minify(css);
      } },
    _processors: [],
    registerCSSProcessor: function registerCSSProcessor(process) {
      R.Style._processors.push(process);
    },
    applyAllProcessors: function applyAllProcessors(css) {
      var rCSS = css;
      _.each(Style._processors, function (process) {
        rCSS = process(rCSS);
      });
      return rCSS;
    },
    slowlyProcessReactStyle: function slowlyProcessReactStyle(style) {
      var css = R.Style.applyAllProcessors("* {\n" + R.Style.getCSSFromReactStyle(style) + "}\n");
      return R.Style.slowlyGetReactStyleFromCSS(css);
    },
    getCSSFromReactStyle: function getCSSFromReactStyle(style, indent) {
      indent = indent || "";
      R.Debug.dev(function () {
        assert(_.isPlainObject(style), "R.Style.getCSSFromReactStyle(...).style: expecting Object.");
      });
      return _.map(style, function (val, attr) {
        return indent + recase.paramCase(attr) + ": " + val + ";\n";
      }).join("");
    },
    slowlyGetReactStyleFromCSS: function slowlyGetReactStyleFromCSS(css) {
      var style = {};
      var parsed = parse(css);
      R.Debug.dev(function () {
        assert(_.size(parsed.stylesheet.rules) === 1, "R.Style.slowlyGetReactStyleFromCSS(...): expecting only 1 set of rules.");
      });
      _.each(parsed.stylesheet.rules, function (rule) {
        if (rule.type === "rule") {
          _.each(rule.declarations, function (decl) {
            if (decl.type === "declaration") {
              style[recase.camelCase(decl.property)] = decl.value;
            }
          });
        }
      });
      return style;
    } });

  return Style;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L3dvcmtzcGFjZV9wci9yZWFjdC1yYWlscy9zcmMvUi5TdHlsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLENBQUMsRUFBRTtBQUN6QixNQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsTUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQyxNQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDakMsTUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDakQsTUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUVwQyxNQUFJLEtBQUssR0FBRyxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUU7QUFDOUIsV0FBTyxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDL0MsQ0FBQzs7QUFFRixHQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtBQUNaLGNBQVUsRUFBRTtBQUNSLGtCQUFZLEVBQUUsU0FBUyxZQUFZLENBQUMsR0FBRyxFQUFFO0FBQ3JDLGVBQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7T0FDekM7QUFDRCxTQUFHLEVBQUUsU0FBUyxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQ25CLGVBQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDckMsRUFDSjtBQUNELGVBQVcsRUFBRSxFQUFFO0FBQ2Ysd0JBQW9CLEVBQUUsU0FBUyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7QUFDekQsT0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3JDO0FBQ0Qsc0JBQWtCLEVBQUUsU0FBUyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7QUFDakQsVUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2YsT0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQVMsT0FBTyxFQUFFO0FBQ3hDLFlBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDeEIsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxJQUFJLENBQUM7S0FDZjtBQUNELDJCQUF1QixFQUFFLFNBQVMsdUJBQXVCLENBQUMsS0FBSyxFQUFFO0FBQzdELFVBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDNUYsYUFBTyxDQUFDLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2xEO0FBQ0Qsd0JBQW9CLEVBQUUsU0FBUyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFlBQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0FBQ3RCLE9BQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVc7QUFDbkIsY0FBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsNERBQTRELENBQUMsQ0FBQztPQUNoRyxDQUFDLENBQUM7QUFDSCxhQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVMsR0FBRyxFQUFFLElBQUksRUFBRTtBQUNwQyxlQUFPLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO09BQy9ELENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDZjtBQUNELDhCQUEwQixFQUFFLFNBQVMsMEJBQTBCLENBQUMsR0FBRyxFQUFFO0FBQ2pFLFVBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLFVBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QixPQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFXO0FBQ25CLGNBQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLHlFQUF5RSxDQUFDLENBQUM7T0FDNUgsQ0FBQyxDQUFDO0FBQ0gsT0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFTLElBQUksRUFBRTtBQUMzQyxZQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO0FBQ3JCLFdBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFTLElBQUksRUFBRTtBQUNyQyxnQkFBRyxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsRUFBRTtBQUM1QixtQkFBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUN2RDtXQUNKLENBQUMsQ0FBQztTQUNOO09BQ0osQ0FBQyxDQUFDO0FBQ0gsYUFBTyxLQUFLLENBQUM7S0FDaEIsRUFDSixDQUFDLENBQUM7O0FBRUgsU0FBTyxLQUFLLENBQUMiLCJmaWxlIjoiUi5TdHlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XHJcbiAgICB2YXIgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcbiAgICB2YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcclxuICAgIHZhciByZWNhc2UgPSByZXF1aXJlKFwiY2hhbmdlLWNhc2VcIik7XHJcbiAgICB2YXIgcGFyc2UgPSByZXF1aXJlKFwiY3NzLXBhcnNlXCIpO1xyXG4gICAgdmFyIF9hdXRvcHJlZml4ZXIgPSByZXF1aXJlKFwiYXV0b3ByZWZpeGVyLWNvcmVcIik7XHJcbiAgICB2YXIgQ2xlYW5DU1MgPSByZXF1aXJlKFwiY2xlYW4tY3NzXCIpO1xyXG5cclxuICAgIHZhciBTdHlsZSA9IGZ1bmN0aW9uIFN0eWxlKHN0eWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0eWxlLnNsb3dseVByb2Nlc3NSZWFjdFN0eWxlKHN0eWxlKTtcclxuICAgIH07XHJcblxyXG4gICAgXy5leHRlbmQoU3R5bGUsIHtcclxuICAgICAgICBQcm9jZXNzb3JzOiB7XHJcbiAgICAgICAgICAgIGF1dG9wcmVmaXhlcjogZnVuY3Rpb24gYXV0b3ByZWZpeGVyKGNzcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9hdXRvcHJlZml4ZXIucHJvY2Vzcyhjc3MpLmNzcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWluOiBmdW5jdGlvbiBtaW4oY3NzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENsZWFuQ1NTKCkubWluaWZ5KGNzcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcHJvY2Vzc29yczogW10sXHJcbiAgICAgICAgcmVnaXN0ZXJDU1NQcm9jZXNzb3I6IGZ1bmN0aW9uIHJlZ2lzdGVyQ1NTUHJvY2Vzc29yKHByb2Nlc3MpIHtcclxuICAgICAgICAgICAgUi5TdHlsZS5fcHJvY2Vzc29ycy5wdXNoKHByb2Nlc3MpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwbHlBbGxQcm9jZXNzb3JzOiBmdW5jdGlvbiBhcHBseUFsbFByb2Nlc3NvcnMoY3NzKSB7XHJcbiAgICAgICAgICAgIHZhciByQ1NTID0gY3NzO1xyXG4gICAgICAgICAgICBfLmVhY2goU3R5bGUuX3Byb2Nlc3NvcnMsIGZ1bmN0aW9uKHByb2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIHJDU1MgPSBwcm9jZXNzKHJDU1MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJDU1M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzbG93bHlQcm9jZXNzUmVhY3RTdHlsZTogZnVuY3Rpb24gc2xvd2x5UHJvY2Vzc1JlYWN0U3R5bGUoc3R5bGUpIHtcclxuICAgICAgICAgICAgdmFyIGNzcyA9IFIuU3R5bGUuYXBwbHlBbGxQcm9jZXNzb3JzKFwiKiB7XFxuXCIgKyBSLlN0eWxlLmdldENTU0Zyb21SZWFjdFN0eWxlKHN0eWxlKSArIFwifVxcblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFIuU3R5bGUuc2xvd2x5R2V0UmVhY3RTdHlsZUZyb21DU1MoY3NzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldENTU0Zyb21SZWFjdFN0eWxlOiBmdW5jdGlvbiBnZXRDU1NGcm9tUmVhY3RTdHlsZShzdHlsZSwgaW5kZW50KSB7XHJcbiAgICAgICAgICAgIGluZGVudCA9IGluZGVudCB8fCBcIlwiO1xyXG4gICAgICAgICAgICBSLkRlYnVnLmRldihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzUGxhaW5PYmplY3Qoc3R5bGUpLCBcIlIuU3R5bGUuZ2V0Q1NTRnJvbVJlYWN0U3R5bGUoLi4uKS5zdHlsZTogZXhwZWN0aW5nIE9iamVjdC5cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gXy5tYXAoc3R5bGUsIGZ1bmN0aW9uKHZhbCwgYXR0cikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGVudCArIHJlY2FzZS5wYXJhbUNhc2UoYXR0cikgKyBcIjogXCIgKyB2YWwgKyBcIjtcXG5cIjtcclxuICAgICAgICAgICAgfSkuam9pbihcIlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNsb3dseUdldFJlYWN0U3R5bGVGcm9tQ1NTOiBmdW5jdGlvbiBzbG93bHlHZXRSZWFjdFN0eWxlRnJvbUNTUyhjc3MpIHtcclxuICAgICAgICAgICAgdmFyIHN0eWxlID0ge307XHJcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZShjc3MpO1xyXG4gICAgICAgICAgICBSLkRlYnVnLmRldihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChfLnNpemUocGFyc2VkLnN0eWxlc2hlZXQucnVsZXMpID09PSAxLCBcIlIuU3R5bGUuc2xvd2x5R2V0UmVhY3RTdHlsZUZyb21DU1MoLi4uKTogZXhwZWN0aW5nIG9ubHkgMSBzZXQgb2YgcnVsZXMuXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXy5lYWNoKHBhcnNlZC5zdHlsZXNoZWV0LnJ1bGVzLCBmdW5jdGlvbihydWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZihydWxlLnR5cGUgPT09IFwicnVsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKHJ1bGUuZGVjbGFyYXRpb25zLCBmdW5jdGlvbihkZWNsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRlY2wudHlwZSA9PT0gXCJkZWNsYXJhdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVtyZWNhc2UuY2FtZWxDYXNlKGRlY2wucHJvcGVydHkpXSA9IGRlY2wudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHlsZTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFN0eWxlO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=